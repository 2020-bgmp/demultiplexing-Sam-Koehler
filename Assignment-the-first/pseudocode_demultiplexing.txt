###Part 2: De-Multiplexing Algorithm

> DEFINE PROBLEM
    > Barcodes are used in NGS to identify sequence data
    > Illumina returns data across 4 files:
        > R1, Read 1  FASTQ data
        > R2, Index 1 FASTQ data
        > R3, Index 2 FASTQ data
        > R4, Read 2  FASTQ data
    > Read data, files R1 & R4, is not sorted by index.
    > It is our job to identify index pairs and sort the data accordingly.

> TARGET OUTPUT
    > Goal: Given 4 double-barcoded FASTQ files, demultiplex reads by index pair.
        > Forward (R1) Output
            > (x24) Forward reads for each dual-matched index
            > (x01) Forward reads for all index-hopping pairs
            > (x01) Forward reads for all unknown and/or low quality indexes
        > Reverse (R2) Output
            > (x24) Reverse reads for each dual-matched index
            > (x01) Reverse reads for all index-hopping pairs
            > (x01) Reverse reads for all unknown and/or low quality indexes
        > Summary File
            > Report number of reads for every index combination
            > Report number of read-pairs with properly matched indexes (per index-pair)
            > Report number of read pairs with index-hopping observed
            > Report number of read-pairs with unknown index(es)

> UNIT TESTS
    > Test Files
        > unit_R1.fastq
        > unit_R2.fastq
        > unit_R3.fastq
        > unit_R4.fastq
    > Details
        > Read 1 - Matched index
            > Known Index (GTAGCGTA)
            > High Quality (JJJJJJJJ)
            > Dual-Matched (GTAGCGTA)
        > Read 2 - Ambiguous index
            > Unknown Index (GTAGCGNA)
            > High Quality (JJJJJJJJ)
            > Dual-Matched (GTAGCGNA)
        > Read 3 - Low quality
            > Known Index (GTAGCGTA)
            > Low Quality (!!!!!!!!)
            > Dual-Matched (GTAGCGTA)
        > Read 4 - Index Hopping
            > Known Index (AACAGCGA, TAGCCATG)
            > High Quality (JJJJJJJJ)
            > Dual-Matched (AACAGCGA, TAGCCATG)
    > Expected Output
        > FILE                                      READS                   FILENAME
        > Dual-matched forward file                 Read 1 (F)              dual_GTAGCGTA_F.fastq
        > Dual-matched reverse file                 Read 1 (R)              dual_GTAGCGTA_R.fastq
        > Low-Quality/unknown-index forward file    Read 2 (F), Read 3 (F)  lowq_F.fastq
        > Low-Quality/unknown-index reverse file    Read 2 (R), Read 3 (R)  lowq_R.fastq
        > Index-hopping forward file                Read 4 (F)              hop_F.fastq
        > Index-hopping reverse file                Read 4 (R)              hop_R.fastq

> HIGH LEVEL FUNCTIONS
    > def convert_phred(vLetter)
        > Description: Converts a single character into a phred score
        > Input
            > vLetter - The function takes an ASCII character as its input
        > Function
            > Use ord() to convert ASCII to value
            > Return value
        > UNIT TEST
            > Input:  I
            > Output: 40
    > def write_out(vRead,vIndx,vFile)
        > Description: Writes a FASTQ read to a specified file
        > Input
            > vRead - A piece of data containing the 4-line read data
            > vIndx - The names of the two barcodes for the read
            > vFile - The name of the target file to write into
        > Function
            > Append the barcodes (vIndx) to the end of the header line
            > Open the output file (vFile)
            > Write the read data to the output file.
            > return
        > UNIT TEST
            > Input
                > Read:
                    > Header
                    > Sequence
                    > +
                    > Quality Score
                > Barcodes: ATGCATGC, ATGCATGC
                > File: index_ATGCATGC.fq
            > Output
                > A read appended to the end of file "index_ATGCATGC.fq" with header "Header + ATGCATGC-ATGCATGC"

> ALGORITHM
    > Generate all index-hopping pairs
        > Given our list of 24 indexes, come up with every combination
        > (24 indexs) x (24 indexes) = (576) - (24 dual matched pairs) = 552 unique index-hopping pairs
    > Compare Indexes for Each Read
        > Open R1, R2, R3, R4 files in parallel
        > Extract indexes from R2 and R3
        > FILTER 1: Check if index is ambiguous
            > True/False: Is 1+ "N" in either index?
                > True: This read is ambiguous
                    > Add the sequence of the index-pair to the header
                    > Write the R1 read to the forward unknown-index/low-quality file (write_out)
                    > Write the R4 read to the reverse unknown-index/low-quality file (write_out)
                    > Move on to the next read
                > False: This read is NOT ambiguous! Proceed to Filter 2
        > FILTER 2: Check if index is low quality
            > Given: A quality-score cutoff threshold
            > Calculate index quality scores
                > Extract quality score line from R2 & R3 files
                > Convert ASCII quality score to Phred+33 (Function: convert_phred())
            > True/False: Do either index contain nucleotides below the quality score threshold?
                > True: This read is low-quality
                    > Add the sequence of the index-pair to the header
                    > Write the R1 read to the forward unknown-index/low-quality file (write_out)
                    > Write the R4 read to the reverse unknown-index/low-quality file (write_out)
                    > Move on to the next read
                > False: This read is NOT low-quality! Proceed to Filter 3
        > FILTER 3: Check for index-hopping
            > True/False: Are the indexes different?
                > True: Index hopping has occured
                    > Add the sequence of the index-pair to the header
                    > Write the R1 read to the forward index-hopping file (write_out)
                    > Write the R4 read to the reverse index-hopping file (write_out)
                    > Move on to the next read 
                False: This read has dual-matched indexes!
                    > Identify the dual-matched index
                    > Add the sequence of the index-pair to the header
                    > Write the R1 read to the index-specific forward dual-matched file (write_out)
                    > Write the R4 read to the index-specific reverse dual-matched file (write_out)
                    > Move on to the next read